{"version":3,"sources":["config.js","App.js","reportWebVitals.js","index.js"],"names":["firebaseConfig","apiKey","process","authDomain","databaseURL","REACT_APP_DB_URL","projectId","storageBucket","messagingSenderId","appId","measurementId","REACT_APP_MESG_ID","app","firebase","initializeApp","getAnalytics","App","dt","Date","useState","time","setTime","period","setPeriod","count","useEffect","interval","setInterval","toLocaleTimeString","clearInterval","console","log","checktime","t","className","getMonth","getDate","getFullYear","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAUiBA,G,MAVM,CACnBC,OAAQC,0CACRC,WAAWD,8BACXE,YAAaF,4ZAAYG,iBACzBC,UAAWJ,cACXK,cAAcL,0BACdM,kBAAmBN,cACnBO,MAAOP,2CACPQ,cAAeR,4ZAAYS,oB,wBCFzBC,EAAIC,IAASC,cAAcd,GACjBe,YAAaH,GA2IdI,MAzIf,WACE,IAAIC,EAAK,IAAIC,KACb,EAAuBC,mBAAS,GAAhC,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAyBF,mBAAS,GAAlC,mBAAKG,EAAL,KAAYC,EAAZ,KACA,EAAuBJ,mBAAS,GAAhC,mBAAKK,EAAL,UAIAC,qBAAU,WACR,IAAIC,EAAWC,aAAY,WACzBN,GAAQ,IAAIH,MAAOU,wBAClB,KACH,OAAO,kBAAMC,cAAcH,MAC1B,IAEHD,qBAAU,WACRK,QAAQC,IAAIX,GACZY,EAAUZ,KACT,CAACA,IAEJ,IAAMY,EAAU,SAACC,GACf,OAAOA,GACL,IAAK,aACHV,EAAU,GACV,MACF,IAAK,aACHA,EAAU,GACV,MACF,IAAK,aACHA,EAAU,GACV,MACF,IAAK,aACHA,EAAU,GACV,MACF,IAAK,cACHA,EAAU,GACV,MACF,IAAK,cACHA,EAAU,GACV,MACF,IAAK,aACHA,EAAU,GACV,MACF,IAAK,aACHA,EAAU,GACV,MACF,IAAK,aACHA,EAAU,oBAWhB,OACE,sBAAKW,UAAU,wBAAf,UACE,wBAAQA,UAAU,iDAAlB,SACE,oBAAIA,UAAU,mDAAd,yBAIF,sBAAKA,UAAU,eAAf,UACE,sBAAKA,UAAU,+CAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,oBAAIA,UAAU,sEAAd,oBAIF,qBAAIA,UAAU,mDAAd,UACGjB,EAAGkB,WADN,IACmBlB,EAAGmB,UADtB,IACkCnB,EAAGoB,cADrC,MACuDb,QAKzD,sBAAKU,UAAU,8CAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,oBAAIA,UAAU,mEAAd,oBAIF,oBAAIA,UAAU,gDAAd,SACGd,OAcL,sBAAKc,UAAU,2CAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,oBAAIA,UAAU,qEAAd,sBAIF,oBAAIA,UAAU,kDAAd,SACGZ,cCvGEgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.57014623.chunk.js","sourcesContent":["const firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain:process.env.REACT_APP_AUTH_DOM ,\r\n    databaseURL: process.env.REACT_APP_DB_URL,\r\n    projectId: process.env.REACT_APP_PRJ_ID,\r\n    storageBucket:process.env.REACT_APP_STG_BKT ,\r\n    messagingSenderId: process.env.REACT_APP_MSG_ID,\r\n    appId: process.env.REACT_APP_APP_ID,\r\n    measurementId: process.env.REACT_APP_MESG_ID\r\n  };\r\n  export default firebaseConfig;","import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport firebaseConfig from \"./config\";\nimport firebase from \"firebase/compat\";\nimport { getAnalytics } from \"firebase/analytics\";\n\nconst app=firebase.initializeApp(firebaseConfig);\nconst anylitics=getAnalytics(app);\n\nfunction App() {\n  let dt = new Date();\n  const [time,setTime] = useState(0);\n  let [period,setPeriod] = useState(1);\n  let [count,setCount] = useState(0);\n\n\n \n  useEffect(() => {\n    let interval = setInterval(() => {\n      setTime(new Date().toLocaleTimeString());\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  useEffect(() => {\n    console.log(time)\n    checktime(time)\n  }, [time]);\n\n  const checktime=(t)=>{\n    switch(t){\n      case \"7:20:00 AM\":\n        setPeriod(1);\n        break;\n      case \"8:11:00 AM\":\n        setPeriod(2);\n        break;\n      case \"9:02:00 AM\":\n        setPeriod(3);\n        break;\n      case \"9:56:00 AM\":\n        setPeriod(4);\n        break;\n      case \"10:47:00 AM\":\n        setPeriod(5);\n        break;\n      case \"12:12:00 AM\":\n        setPeriod(6);\n        break;\n      case \"1:03:00 PM\":\n        setPeriod(7);\n        break;\n      case \"1:54:00 PM\":\n        setPeriod(8);\n        break;\n      case \"2:40:00 PM\":\n        setPeriod(\"school is done\");\n        break\n    }\n  }\n        \n\n\n\n\n   \n\n  return (\n    <div className=\"bg-green-200 h-screen\">\n      <header className=\" bg-yellow-400 p-6 text-center rounded-xl mb-6\">\n        <h1 className=\"text-2xl font-bold bg-yellow-200 p-2 rounded-2xl\">\n          Timer App\n        </h1>\n      </header>\n      <div className=\"items-center\">\n        <div className=\"bg-blue-800 text-center p-5 rounded-3xl mb-5\">\n          <div className=\"flex justify-center p-2\">\n            <h1 className=\" flex-initial text-3xl text-bold rounded-3xl px-5 p-3 bg-purple-300\">\n              Date\n            </h1>\n          </div>\n          <h3 className=\"text-2xl text-bold bg-indigo-200 rounded-3xl p-2\" >\n            {dt.getMonth()}/{dt.getDate()}/{dt.getFullYear()}   {count}\n          </h3>\n        </div>\n\n\n        <div className=\"bg-red-800 text-center p-5 rounded-3xl mb-5\" >\n          <div className=\"flex justify-center p-2\">\n            <h1 className=\" flex-initial text-3xl text-bold rounded-3xl px-5 p-3 bg-red-300\" >\n              Time\n            </h1>\n          </div>\n          <h3 className=\"text-2xl text-bold bg-red-200 rounded-3xl p-2\" >\n            {time}   \n          </h3>\n        </div>\n\n\n\n\n\n\n\n\n\n\n\n        <div className=\"bg-green-800 text-center p-5 rounded-3xl\">\n          <div className=\"flex justify-center p-2\">\n            <h1 className=\" flex-initial text-3xl text-bold rounded-3xl px-5 p-3 bg-green-300\">\n              Period\n            </h1>\n          </div>\n          <h3 className=\"text-2xl text-bold bg-green-200 rounded-3xl p-2\">\n            {period}\n          </h3>\n        </div>\n\n\n\n\n\n\n      </div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n    </div>\n\n\n\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}